// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

import 'package:flutter_dotenv/flutter_dotenv.dart';

late String webApiKey, webAppId, androidApiKey, androidAppId, iosApiKey, iosAppId, macosApiKey, macosAppId;
Future main() async {
  await dotenv.load(fileName: ".env");
  final webApiKey = DotEnv().env['WEB_API_KEY'];
  final webAppId = DotEnv().env['WEB_APP_ID'];
  final androidApiKey = DotEnv().env['ANDROID_API_KEY'];
  final androidAppId = DotEnv().env['ANDROID_APP_ID'];
  final iosApiKey = DotEnv().env['IOS_API_KEY'];
  final iosAppId = DotEnv().env['IOS_APP_ID'];
  final macosApiKey = DotEnv().env['MACOS_API_KEY'];
  final macosAppId = DotEnv().env['MACOS_APP_ID'];
}
/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static final FirebaseOptions web = FirebaseOptions(
    apiKey:webApiKey,
    appId: webAppId,
    messagingSenderId: '226157239542',
    projectId: 'contacts-app-flutter-firebase',
    authDomain: 'contacts-app-flutter-firebase.firebaseapp.com',
    storageBucket: 'contacts-app-flutter-firebase.appspot.com',
    measurementId: 'G-MR1W46YC2C',
  );

  static final FirebaseOptions android = FirebaseOptions(
    apiKey: androidApiKey,
    appId: androidAppId,
    messagingSenderId: '226157239542',
    projectId: 'contacts-app-flutter-firebase',
    storageBucket: 'contacts-app-flutter-firebase.appspot.com',
  );

  static final FirebaseOptions ios = FirebaseOptions(
    apiKey: iosApiKey,
    appId: iosAppId,
    messagingSenderId: '226157239542',
    projectId: 'contacts-app-flutter-firebase',
    storageBucket: 'contacts-app-flutter-firebase.appspot.com',
    iosBundleId: 'com.example.contactsApp',
  );

  static final FirebaseOptions macos = FirebaseOptions(
    apiKey: macosApiKey,
    appId: macosAppId,
    messagingSenderId: '226157239542',
    projectId: 'contacts-app-flutter-firebase',
    storageBucket: 'contacts-app-flutter-firebase.appspot.com',
    iosBundleId: 'com.example.contactsApp.RunnerTests',
  );
}